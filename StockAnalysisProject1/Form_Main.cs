using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.IO;
using System.Linq;
using System.Windows.Forms;
using System.Windows.Forms.DataVisualization.Charting;

namespace WindowsFormsApp1
{
    public partial class Form_Basic : Form
    {
        // List containing all candlestick data loaded from the file
        private List<aCandlestick> listOfCandlesticks = new List<aCandlestick>();

        // BindingList used to bind filtered candlesticks to DataGridView
        private BindingList<aCandlestick> filteredCandlesticks = new BindingList<aCandlestick>();

        /// <summary>
        /// Initializes the form, sets default date range, and prepares chart structure.
        /// </summary>
        public Form_Basic()
        {
            InitializeComponent(); // Initialize UI components generated by designer

            // Set default start date to 1 year ago from today
            dateTimePicker_Start.Value = DateTime.Now.AddYears(-1);

            // Set default end date to today
            dateTimePicker_End.Value = DateTime.Now;

            // Initialize chart areas and series for OHLC and volume
            InitializeChart();
        }

        /// <summary>
        /// Opens the file dialog to allow the user to select a stock CSV file.
        /// </summary>
        private void button_fireOpenFileDialog_Click(object sender, EventArgs e)
        {
            // Filter for CSV files, allow all files as fallback
            openFileDialog_fileSelector.Filter = "CSV files (*.csv)|*.csv|All files (*.*)|*.*";

            // Show the OpenFileDialog
            openFileDialog_fileSelector.ShowDialog();
        }

        /// <summary>
        /// Handles the FileOk event for the OpenFileDialog.
        /// Executes the main pipeline: read → filter → normalize → display.
        /// </summary>
        private void openFileDialog_fileSelector_FileOk(object sender, CancelEventArgs e)
        {
            string filename = openFileDialog_fileSelector.FileName; // Get selected file path

            this.Text = "Loading: " + Path.GetFileName(filename); // Show loading status in title bar

            readCandlesticksFromFile(); // Load all candlesticks from CSV
            filterCandlesticks();       // Filter based on default date pickers
            normalizeChart();           // Adjust chart Y-axis to data range
            displayCandlesticks();      // Bind filtered data to chart and DataGridView

            // Update form title with loaded count
            this.Text = $"Loaded {listOfCandlesticks.Count} candlesticks from {Path.GetFileName(filename)}";
        }

        /// <summary>
        /// Handles the Update button click event.
        /// Re-filters and refreshes the chart based on selected date range.
        /// </summary>
        private void button_Update_Click(object sender, EventArgs e)
        {
            // Check if data has been loaded
            if (listOfCandlesticks == null || listOfCandlesticks.Count == 0)
            {
                MessageBox.Show("Please load a stock file first.", "No Data", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            filterCandlesticks();   // Filter data with current date range
            normalizeChart();       // Adjust chart Y-axis
            displayCandlesticks();  // Refresh chart and DataGridView
        }

        /// <summary>
        /// Reads a stock CSV file and returns a list of parsed candlesticks.
        /// Parameterized version.
        /// </summary>
        /// <param name="tickerFile">CSV file path</param>
        /// <returns>List of candlestick objects</returns>
        private List<aCandlestick> readCandlestickFile(string tickerFile)
        {
            var candlesticks = new List<aCandlestick>(); // Temporary list to store parsed data

            try
            {
                // Read all lines and ignore empty lines
                var lines = File.ReadAllLines(tickerFile)
                                .Where(l => !string.IsNullOrWhiteSpace(l))
                                .ToArray();

                // Skip header (index 0), parse each line into a candlestick
                for (int i = 1; i < lines.Length; i++)
                {
                    try
                    {
                        aCandlestick c = new aCandlestick(lines[i]); // Parse line
                        candlesticks.Add(c); // Add to list
                    }
                    catch { /* Ignore lines that fail to parse */ }
                }
            }
            catch (Exception ex)
            {
                // Show message if file cannot be read
                MessageBox.Show($"Error reading file: {ex.Message}", "File Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }

            return candlesticks; // Return parsed list
        }

        /// <summary>
        /// Reads candlesticks from the currently selected file and updates the form’s list.
        /// Void version.
        /// </summary>
        private void readCandlesticksFromFile()
        {
            string filename = openFileDialog_fileSelector.FileName; // Get selected file
            listOfCandlesticks = readCandlestickFile(filename);     // Read and parse CSV

            // Ensure the list is sorted chronologically
            listOfCandlesticks = listOfCandlesticks.OrderBy(c => c.date).ToList();
        }

        /// <summary>
        /// Filters a given list of candlesticks within a date range.
        /// Parameterized version.
        /// </summary>
        /// <param name="unfilteredList">List to filter</param>
        /// <param name="startDate">Start of date range</param>
        /// <param name="endDate">End of date range</param>
        /// <returns>Filtered and sorted list</returns>
        private List<aCandlestick> filterCandlesticks(List<aCandlestick> unfilteredList, DateTime startDate, DateTime endDate)
        {
            return unfilteredList
                .Where(c => c.date.Date >= startDate.Date && c.date.Date <= endDate.Date) // Filter by date
                .OrderBy(c => c.date) // Sort chronologically
                .ToList();
        }

        /// <summary>
        /// Filters the form’s candlestick data and updates the DataGridView.
        /// Void version.
        /// </summary>
        private void filterCandlesticks()
        {
            DateTime start = dateTimePicker_Start.Value.Date; // Get start date from picker
            DateTime end = dateTimePicker_End.Value.Date;     // Get end date from picker

            var filteredList = filterCandlesticks(listOfCandlesticks, start, end); // Filter using parameterized version

            filteredCandlesticks = new BindingList<aCandlestick>(filteredList); // Convert to BindingList for DataGridView
            dataGridView1.DataSource = filteredCandlesticks; // Update DataGridView
        }

        /// <summary>
        /// Normalizes the Y-axis of the OHLC chart using filtered data ±2%.
        /// </summary>
        private void normalizeChart()
        {
            if (filteredCandlesticks == null || filteredCandlesticks.Count == 0)
                return; // No data, skip normalization

            decimal minLow = filteredCandlesticks.Min(c => c.low);   // Find minimum low
            decimal maxHigh = filteredCandlesticks.Max(c => c.high); // Find maximum high

            // Expand min and max by 2% to use full chart height
            double minAxis = (double)(minLow * 0.98m);
            double maxAxis = (double)(maxHigh * 1.02m);

            var area = chart1.ChartAreas["ChartArea_OHLC"]; // Get OHLC chart area
            area.AxisY.Minimum = minAxis;                  // Set Y-axis minimum
            area.AxisY.Maximum = maxAxis;                  // Set Y-axis maximum
        }

        /// <summary>
        /// Initializes chart areas and series for OHLC and volume.
        /// </summary>
        private void InitializeChart()
        {
            chart1.Series.Clear();      // Remove existing series
            chart1.ChartAreas.Clear();  // Remove existing chart areas

            // Create OHLC chart area
            ChartArea areaOHLC = new ChartArea("ChartArea_OHLC");
            areaOHLC.AxisX.LabelStyle.Format = "MM/dd";                   // Format X-axis labels
            areaOHLC.AxisX.MajorGrid.LineColor = System.Drawing.Color.LightGray; // Grid color
            areaOHLC.AxisY.MajorGrid.LineColor = System.Drawing.Color.LightGray;
            areaOHLC.AxisY.Title = "Price";                               // Y-axis label
            chart1.ChartAreas.Add(areaOHLC);                              // Add area to chart

            // Create Volume chart area aligned to OHLC
            ChartArea areaVol = new ChartArea("ChartArea_Volume");
            areaVol.AlignWithChartArea = "ChartArea_OHLC"; // Align X-axis
            areaVol.AlignmentOrientation = AreaAlignmentOrientations.Vertical;
            areaVol.AxisX.LabelStyle.Format = "MM/dd";
            areaVol.AxisY.MajorGrid.Enabled = false;       // Disable Y-axis grid
            areaVol.AxisY.Title = "Volume";                // Y-axis label
            chart1.ChartAreas.Add(areaVol);

            // Add OHLC series
            Series seriesOHLC = new Series("Series_OHLC");
            seriesOHLC.ChartType = SeriesChartType.Candlestick;
            seriesOHLC.ChartArea = "ChartArea_OHLC";
            seriesOHLC.XValueType = ChartValueType.Date;
            seriesOHLC.YValuesPerPoint = 4;                // Open, High, Low, Close
            seriesOHLC.CustomProperties = "PriceDownColor=Red,PriceUpColor=Lime"; // Colors
            seriesOHLC["OpenCloseStyle"] = "Triangle";
            seriesOHLC["ShowOpenClose"] = "Both";
            chart1.Series.Add(seriesOHLC);

            // Add Volume series
            Series seriesVol = new Series("Series_Volume");
            seriesVol.ChartType = SeriesChartType.Column;
            seriesVol.ChartArea = "ChartArea_Volume";
            seriesVol.XValueType = ChartValueType.Date;
            seriesVol.YAxisType = AxisType.Primary;
            chart1.Series.Add(seriesVol);
        }

        /// <summary>
        /// Binds filtered candlestick data to the chart and refreshes display.
        /// </summary>
        private void displayCandlesticks()
        {
            if (filteredCandlesticks == null || filteredCandlesticks.Count == 0)
            {
                // Clear chart if no data
                chart1.Series["Series_OHLC"].Points.Clear();
                chart1.Series["Series_Volume"].Points.Clear();
                return;
            }

            chart1.DataSource = filteredCandlesticks;       // Set chart data source

            // Configure OHLC series
            chart1.Series["Series_OHLC"].XValueMember = "date";
            chart1.Series["Series_OHLC"].YValueMembers = "high,low,open,close";
            chart1.Series["Series_OHLC"].XValueType = ChartValueType.Date;

            // Configure Volume series
            chart1.Series["Series_Volume"].XValueMember = "date";
            chart1.Series["Series_Volume"].YValueMembers = "volume";
            chart1.Series["Series_Volume"].XValueType = ChartValueType.Date;

            chart1.DataBind(); // Bind data to chart
        }
    }
}
